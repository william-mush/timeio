// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  alarms        Alarm[]
  archivedAlarms ArchivedAlarm[]
  timezone      String    @default("UTC")
  timeZones     UserTimeZone[]
  settings      UserSettings?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Alarm {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  hours         Int
  minutes       Int
  label         String?
  sound         String
  isEnabled     Boolean   @default(true)
  repeatDays    Int[]     // 0-6 for Sunday-Saturday
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastTriggered DateTime?
}

model ArchivedAlarm {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  hours         Int
  minutes       Int
  label         String?
  sound         String
  repeatDays    Int[]     // 0-6 for Sunday-Saturday
  createdAt     DateTime  // When the original alarm was created
  archivedAt    DateTime  @default(now())
  lastTriggered DateTime?
  reason        String    // Why the alarm was archived (e.g., "deleted", "replaced")
}

model UserTimeZone {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cityId    String   // References the city ID from the CITIES data
  cityName  String   // Store the city name for quick access
  country   String   // Store the country for quick access
  offset    Float    // Store the UTC offset
  region    String   // Store the geographical region
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Int      @default(0)  // For custom ordering

  @@unique([userId, cityId])
  @@index([userId, order])
}

model UserSettings {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  format24Hour  Boolean  @default(false)
  showSeconds   Boolean  @default(true)
  showMilliseconds Boolean @default(false)
  timeZone      String   @default("UTC")
  dateFormat    String   @default("MM/dd/yyyy")
  defaultClockCount Int  @default(3)
  sortOrder     String   @default("timezone") // 'name' | 'timezone' | 'added'
  theme         String   @default("light")    // 'light' | 'dark' | 'system'
  clockStyle    String   @default("digital")  // 'digital' | 'analog' | 'both'
  colorScheme   String   @default("blue")     // 'blue' | 'purple' | 'green' | 'orange'
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
